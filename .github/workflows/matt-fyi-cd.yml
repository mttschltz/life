name: matt.fyi CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  static-unit:
    name: 'Static analysis and unit tests'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/github-script@v5.0.0
        name: Get commit messages
        id: get-commit-messages
        with:
          script: |
            return [{ "message": "One"} ,{"message":  "Two" },{"message":  "Three"}]
          # result-encoding: string

      - uses: actions/github-script@v5.0.0
        name: Get commit messages strings
        id: get-commit-messages-strings
        with:
          script: |
            return ["One", "Two", "Three"]
          # result-encoding: string

      - name: Print commits
        if: always()
        run: echo "${{ steps.get-commit-messages.outputs.result }}"

      - name: Print commits
        if: always()
        run: echo "${{ fromJSON(steps.get-commit-messages.outputs.result) }}"

      - name: Print commits
        if: always()
        run: echo "${{ join(steps.get-commit-messages.outputs.result.*.message, ',') }}"

      - name: Print commits
        if: always()
        run: echo "${{ join(fromJSON(steps.get-commit-messages.outputs.result.*.message), ',') }}"

      - name: Print commits
        if: always()
        run: echo "${{ steps.get-commit-messages-strings.outputs.result }}"

      - name: Print commits
        if: always()
        run: echo "${{ fromJSON(steps.get-commit-messages-strings.outputs.result) }}"

      - name: Print commits
        if: always()
        run: echo "${{ join(steps.get-commit-messages-strings.outputs.result, ',') }}"

      - name: Print commits
        if: always()
        run: echo "${{ join(fromJSON(steps.get-commit-messages-strings.outputs.result), ',') }}"

      - uses: slackapi/slack-github-action@v1.16.0
        name: Post starting to Slack
        with:
          channel-id: 'C01CTC53XGT' # #deploys-matt-fyi
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ join(steps.get-commit-messages-strings.outputs.result, ',') }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Tests and build started for commits:\n\nâ€¢ ${{ join(github.event.commits.*.message, '\nâ€¢') }}"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "ðŸ‘‰ Github Action",
                      "emoji": true
                    },
                    "value": "click_me_123",
                    "url": "${{ env.RUN_URL }}",
                    "action_id": "button-action"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Use Node.js version
        uses: actions/setup-node@v2
        with:
          node-version: '14.16.1'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn --frozen-lockfile --non-interactive --silent

      - name: Lint
        run: yarn lint

      - name: Unit tests
        run: yarn test:unit

      - uses: slackapi/slack-github-action@v1.16.0
        name: Post failure to Slack
        if: failure()
        with:
          channel-id: 'C01CTC53XGT' # #deploys-matt-fyi
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "ðŸ’¥ Failed <@here>: Static analysis and unit tests."
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  visual-reg:
    name: 'Visual regression tests'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js version
        uses: actions/setup-node@v2
        with:
          node-version: '14.16.1'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn --frozen-lockfile --non-interactive --silent

      - name: Visual regression tests
        run: yarn test:visreg

      - name: Upload visual regression screenshots
        if: failure()
        uses: actions/upload-artifact@v2.3.1
        with:
          name: screenshots
          path: .loki
          retention-days: 90 # 90 is default

      - uses: slackapi/slack-github-action@v1.16.0
        name: Post failure to Slack
        if: failure()
        with:
          channel-id: 'C01CTC53XGT' # #deploys-matt-fyi
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "ðŸ’¥ Failed <@here>: Visual regression tests."
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  build:
    name: 'Build'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js version
        uses: actions/setup-node@v2
        with:
          node-version: '14.16.1'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn --frozen-lockfile --non-interactive --silent

      - name: Build
        run: yarn build:matt-fyi

      - name: Save build files
        uses: actions/upload-artifact@v2
        with:
          name: build-files
          path: app/matt-fyi/public
          retention-days: 5

      - uses: slackapi/slack-github-action@v1.16.0
        name: Post failure to Slack
        if: failure()
        with:
          channel-id: 'C01CTC53XGT' # #deploys-matt-fyi
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "ðŸ’¥ Failed <@here>: Build."
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  deploy:
    name: 'Deploy to Netlify'
    runs-on: ubuntu-latest
    needs: [static-unit, visual-reg, build]
    steps:
      - uses: slackapi/slack-github-action@v1.16.0
        name: Post deploy starting to Slack
        with:
          channel-id: 'C01CTC53XGT' # #deploys-matt-fyi
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Tests passed and build complete. Deploying..."
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Download build files
        uses: actions/download-artifact@v2
        with:
          name: build-files
          path: build-files

      - name: Deploy
        uses: netlify/actions/cli@master # TODO: tie to specific commit
        with:
          args: deploy --dir=build-files --prod
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - uses: slackapi/slack-github-action@v1.16.0
        name: Post failure to Slack
        if: failure()
        with:
          channel-id: 'C01CTC53XGT' # #deploys-matt-fyi
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "ðŸ’¥ Failed <@here>: Deploy to Netlify."
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
